# PyFatFs

PyFatFs provides Python bindings for the FatFs library, enabling high-level file and directory management for embedded systems and microcontrollers.

## Overview

FatFs is a generic FAT/exFAT filesystem module for small embedded systems. PyFatFs wraps this C library with a Pythonic interface, making it easy to work with FAT filesystems from Python applications.

## Features

- High-level file operations: open, read, write, close
- Context manager support for automatic resource cleanup
- Error handling with descriptive error messages
- File manager for enhanced operations
- Cross-platform compatibility (Windows, Linux, macOS)
- Minimal dependencies

## Installation

### Prerequisites

- Python 3.6 or higher
- C compiler (Visual Studio on Windows, GCC on Linux/macOS)
- setuptools

### Building from Source

```bash
git clone <repository-url>
cd PyFatFs
python setup.py build_ext --inplace
pip install .
```

### Quick Setup

After cloning the repository:

```bash
# Build the extension
python setup.py build_ext --inplace

# The compiled extension will be available as fatfs.cp3x-platform.pyd/so
```

## Usage

### Basic File Operations

```python
import pyfatfs

# Mount filesystem
pyfatfs.mount("/", 0, 1)

# Write to a file
with pyfatfs.open_file("test.txt", "w") as f:
    f.write("Hello, FatFs!")

# Read from a file
with pyfatfs.open_file("test.txt", "r") as f:
    content = f.read()
    print(content)

# Append to a file
with pyfatfs.open_file("test.txt", "a") as f:
    f.write("\nAppended content")
```

### Using the File Manager

```python
from pyfatfs.FileAccessWrapper import FatFsFileManager

manager = FatFsFileManager()
manager.mount_filesystem("/", 0, 1)

# Check if file exists
if manager.file_exists("myfile.txt"):
    size = manager.get_file_size("myfile.txt")
    print(f"File size: {size} bytes")

# Copy files
manager.copy_file("source.txt", "destination.txt")
```

### Error Handling

```python
import pyfatfs

try:
    result = pyfatfs.mount("/", 0, 1)
    if result != pyfatfs.FR_OK:
        print(f"Mount failed: {pyfatfs.get_error_string(result)}")
    
    with pyfatfs.open_file("test.txt", "r") as f:
        content = f.read()
        
except IOError as e:
    print(f"File operation failed: {e}")
```

## File Modes

- `"r"`: Read only (default)
- `"w"`: Write (truncates existing file)
- `"a"`: Append
- `"r+"`: Read and write (file must exist)
- `"w+"`: Read and write (truncates existing file)
- `"a+"`: Read and append

## Result Codes

PyFatFs uses FatFs result codes:

- `FR_OK` (0): Success
- `FR_DISK_ERR` (1): Disk error
- `FR_NOT_READY` (3): Drive not ready
- `FR_NO_FILE` (4): File not found
- `FR_NO_PATH` (5): Path not found
- `FR_INVALID_NAME` (6): Invalid file name
- `FR_DENIED` (7): Access denied
- `FR_EXIST` (8): File exists

Use `pyfatfs.get_error_string(code)` to get human-readable error messages.

## Examples

See the `examples/` directory for complete working examples:

- `basic_file_ops.py`: Basic file operations
- `file_manager_demo.py`: File manager usage
- `error_handling.py`: Error handling patterns

## Project Structure

```
PyFatFs/
├── README.md                   # This file
├── setup.py                    # Build configuration
├── pyfatfs/                    # Python package
│   ├── __init__.py            # Package initialization
│   ├── core.py                # Low-level FatFs bindings
│   ├── file.py                # High-level file operations
│   ├── FileAccessWrapper.py   # File manager
│   └── DirectoryAccessWrapper.py  # Directory operations
├── examples/                   # Usage examples
│   ├── basic_file_ops.py
│   ├── file_manager_demo.py
│   └── error_handling.py
├── source/                     # C source files
│   ├── ff.c                   # FatFs core
│   ├── ff.h                   # FatFs header
│   ├── diskio_minimal.c       # Disk I/O implementation
│   ├── ffconf.h               # FatFs configuration
│   └── fatfs_python.c         # Python C extension
└── build/                      # Build artifacts
```

## API Reference

### Core Functions

- `mount(path, drive, opt)`: Mount filesystem
- `open_file(path, mode)`: Open file
- `get_error_string(code)`: Get error message

### File Operations

- `FatFsFile.read(size)`: Read data
- `FatFsFile.write(data)`: Write data
- `FatFsFile.close()`: Close file

### File Manager

- `FatFsFileManager.mount_filesystem()`: Mount filesystem
- `FatFsFileManager.file_exists()`: Check file existence
- `FatFsFileManager.get_file_size()`: Get file size
- `FatFsFileManager.copy_file()`: Copy file

## Limitations

Current implementation includes:

- Basic file operations (read, write, open, close)
- File mounting
- Error handling

Not yet implemented:

- Directory operations (mkdir, rmdir, listdir)
- File deletion and renaming
- File attributes and timestamps
- Advanced filesystem operations

These features require additional C extension functions and will be added in future versions.

## Development

### Building

```bash
# Clean build
python setup.py clean --all
python setup.py build_ext --inplace

# Install in development mode
pip install -e .
```

### Testing

```bash
# Run examples
python examples/basic_file_ops.py
python examples/file_manager_demo.py
python examples/error_handling.py
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests and examples
5. Submit a pull request

## License

This project is licensed under the MIT License. See LICENSE file for details.

## Credits

- FatFs library by ChaN
- Python C extension implementation
- Contributors and maintainers

## Support

For issues and questions:

1. Check the examples directory
2. Review the API documentation
3. Open an issue on the repository
4. Check FatFs documentation for low-level details